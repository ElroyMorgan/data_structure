searchState.loadedDescShard("data_structure", 0, "Sorting algorithms implementation\n清空列表\n删除指定位置的元素\n检查列表是否非空\nReturns the argument unchanged.\n获取指定位置的元素\n在指定位置插入元素\nCalls <code>U::from(self)</code>.\n获取列表长度\n查找元素的位置\n创建一个新的空 <code>ArrayList</code>\n获取元素后继\n获取元素的前驱\n遍历并打印所有元素\n链表节点结构体\n节点存储的数据，哨兵节点为None\nReturns the argument unchanged.\n获取指定索引(0-based)节点的不可变引用 …\n获取指定索引(0-based)节点的可变引用 …\n在指定位置插入新节点\nCalls <code>U::from(self)</code>.\n获取链表长度(不包含哨兵节点)\n创建一个新的哨兵节点(不包含数据)\n指向下一个节点的指针\n删除链表尾部节点\n在链表尾部添加新节点\n删除指定位置的节点\n顺序栈实现\nReturns the argument unchanged.\n获取栈顶元素的不可变引用\n获取栈顶元素的可变引用\nCalls <code>U::from(self)</code>.\n检查栈是否为空\n检查栈是否已满\n创建一个新的顺序栈\n弹出栈顶元素\n将元素压入栈顶\n自定义字符串结构体，基于字符切片实现\n字符切片\nReturns the argument unchanged.\nBF算法实现字符串匹配\nCalls <code>U::from(self)</code>.\n字符串长度\n创建一个新的字符串实例\nSorts an i32 array in-place using quick sort algorithm")